<?xml version="1.0" encoding="UTF-8"?>

<!--
	Copyright 2021 Elastic Path Software Inc.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

 A schema for the mvnmin.xml file used to configure mvnmin.
 -->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="mvnmin" type="mvnminType">
    <xs:annotation>
      <xs:documentation>Instructions for Maven Minimal on how to build Elastic Path Commerce.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ignored-modulesType">
    <xs:sequence>
      <xs:element type="xs:string" name="module" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="matchType">
	  <xs:attribute type="xs:string" name="regex"/>
  </xs:complexType>
  <xs:complexType name="build-ifType">
    <xs:sequence>
      <xs:element type="matchType" name="match" maxOccurs="unbounded" minOccurs="1"/>
      <xs:element type="xs:string" name="module" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
    <xs:attribute type="xs:string" name="description" use="optional"/>
  </xs:complexType>
  <xs:complexType name="build-ifsType">
    <xs:sequence>
      <xs:element type="build-ifType" name="build-if" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="reactorType">
    <xs:sequence>
      <xs:element type="xs:string" name="description" minOccurs="0"/>
      <xs:element type="xs:string" name="pattern" maxOccurs="unbounded" minOccurs="1"/>
    </xs:sequence>
    <xs:attribute type="xs:string" name="primary" use="optional"/>
    <xs:attribute type="xs:string" name="name"/>
    <xs:attribute type="xs:string" name="pom"/>
    <xs:attribute type="xs:boolean" name="single-thread" use="optional"/>
    <xs:attribute type="xs:string" name="skip-if" use="optional"/>
  </xs:complexType>
  <xs:complexType name="reactorsType">
    <xs:sequence>
      <xs:element type="reactorType" name="reactor" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="mvnminType">
    <xs:sequence>
      <xs:element type="ignored-modulesType" name="ignored-modules" maxOccurs="1" minOccurs="0">
        <xs:annotation>
          <xs:documentation>These projects will not be invoked by mvnmin.
	 These likely cause mvnmin all to fail
	
			# cmclient docs not needed for master (but at least for 8.0.x)
			# standalone-demo-parent, EP-Commerce-Demo and standalone-demo-data break for 7.5.x
			# standalone-demo-h2-database breaks for 7.5.x

			# Catalog syndication should be added into the reactor

			# For the disabled reports above, perhaps wire them in, but provide a 'disabled-reports' maven profile?

			# For the system tests, wire them in to the reactor and add a -Pwith-remote-tests profile.
			# Then nitro can use `-P\!with-remote-tests` with when building with the `all` option

			# Seems like -Pwith-deployment-package would address that project</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="build-ifsType" name="build-ifs" maxOccurs="1" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Conditional Build Glue:
		If a project is activated that matches the module regex, mvnmin will activate the associated projects.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="reactorsType" name="reactors" maxOccurs="1" minOccurs="0">
        <xs:annotation>
          <xs:documentation><![CDATA[Reactor Overrides
		Define sub-reactors that mvnmin can then target in a finer-grained way, than vanilla maven.

		The ordering of the reactors is important, this is the order mvnmin will invoke the reactors.

		The reactor options are:
			name=<reactor name>                     - an arbitrary name for a Reactor, used during mvnmin output
			pom=<relative path to poml.xml>         - path the pom.xml which the maven build will be started with
			single-thread=<true|false>              - force a reactor to run single-threaded, regardless of command line arguments
			skip-if=<cmd line argument regex>       - a regex that will cause the reactor to be skipped, if present on the command line
			pattern-<num>=<module regex pattern>    - a regex to match module names for this reactor (see below)

			Patterns
			A reactor may define multiple patterns, as needed, so that all required projects are associated with it.
			<num>  the pattern id.  (format: sequential integers, starting from 1)]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>